name: Automated Release Creation

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags (v1.0.0, v2.1.3, etc.)
      - 'v*.*.*-*'  # Pre-release tags (v1.0.0-alpha, v1.0.0-beta.1, etc.)

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Get tag information
        id: tag-info
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release
          if [[ $CURRENT_TAG == *"-"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Current tag: $CURRENT_TAG"

      - name: Get previous tag and commit range
        id: commit-range
        run: |
          CURRENT_TAG="${{ steps.tag-info.outputs.current_tag }}"
          
          # Get all tags sorted by version
          TAGS=$(git tag --sort=-version:refname)
          
          # Find the previous tag
          PREVIOUS_TAG=""
          FOUND_CURRENT=false
          
          for tag in $TAGS; do
            if [ "$FOUND_CURRENT" = true ]; then
              PREVIOUS_TAG=$tag
              break
            fi
            if [ "$tag" = "$CURRENT_TAG" ]; then
              FOUND_CURRENT=true
            fi
          done
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # This is the first tag, use the initial commit
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "is_first_release=true" >> $GITHUB_OUTPUT
            echo "This is the first release"
          else
            echo "is_first_release=false" >> $GITHUB_OUTPUT
            echo "Previous tag: $PREVIOUS_TAG"
          fi
          
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          
          # Get commit count
          if [ "${{ steps.tag-info.outputs.current_tag }}" != "$PREVIOUS_TAG" ]; then
            COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..$CURRENT_TAG)
          else
            COMMIT_COUNT=$(git rev-list --count HEAD)
          fi
          
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "Commits in this release: $COMMIT_COUNT"

      - name: Generate comprehensive release notes
        id: release-notes
        run: |
          CURRENT_TAG="${{ steps.tag-info.outputs.current_tag }}"
          PREVIOUS_TAG="${{ steps.commit-range.outputs.previous_tag }}"
          IS_FIRST="${{ steps.commit-range.outputs.is_first_release }}"
          COMMIT_COUNT="${{ steps.commit-range.outputs.commit_count }}"
          IS_PRERELEASE="${{ steps.tag-info.outputs.is_prerelease }}"
          
          # Create release notes file
          cat > release_notes.md << 'EOF'
          # Release Notes
          
          EOF
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "⚠️ **This is a pre-release version**" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          if [ "$IS_FIRST" = "true" ]; then
            echo "🎉 **Initial Release**" >> release_notes.md
            echo "" >> release_notes.md
            echo "This is the first release of the project!" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "## 📊 Release Statistics" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Commits**: $COMMIT_COUNT" >> release_notes.md
          echo "- **Tag**: \`$CURRENT_TAG\`" >> release_notes.md
          if [ "$IS_FIRST" != "true" ]; then
            echo "- **Previous Tag**: \`$PREVIOUS_TAG\`" >> release_notes.md
          fi
          echo "- **Release Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "## 🔄 Changes in This Release" >> release_notes.md
          echo "" >> release_notes.md
          
          # Generate commit list with categorization
          if [ "$IS_FIRST" = "true" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="$PREVIOUS_TAG..$CURRENT_TAG"
          fi
          
          # Get commits and categorize them
          git log $COMMIT_RANGE --pretty=format:"%s|%h|%an|%ad" --date=short > commits.tmp
          
          # Initialize categories
          echo "### ✨ Features" >> release_notes.md
          echo "" >> release_notes.md
          
          FEATURES_FOUND=false
          while IFS='|' read -r message hash author date; do
            if [[ $message == feat* ]] || [[ $message == *feature* ]] || [[ $message == *add* ]]; then
              echo "- $message (\`$hash\`) - $author" >> release_notes.md
              FEATURES_FOUND=true
            fi
          done < commits.tmp
          
          if [ "$FEATURES_FOUND" = false ]; then
            echo "_No new features in this release._" >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          echo "### 🐛 Bug Fixes" >> release_notes.md
          echo "" >> release_notes.md
          
          FIXES_FOUND=false
          while IFS='|' read -r message hash author date; do
            if [[ $message == fix* ]] || [[ $message == *bug* ]] || [[ $message == *fix* ]]; then
              echo "- $message (\`$hash\`) - $author" >> release_notes.md
              FIXES_FOUND=true
            fi
          done < commits.tmp
          
          if [ "$FIXES_FOUND" = false ]; then
            echo "_No bug fixes in this release._" >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          echo "### 🔧 Improvements" >> release_notes.md
          echo "" >> release_notes.md
          
          IMPROVEMENTS_FOUND=false
          while IFS='|' read -r message hash author date; do
            if [[ $message == refactor* ]] || [[ $message == *improve* ]] || [[ $message == *update* ]] || [[ $message == *enhance* ]]; then
              echo "- $message (\`$hash\`) - $author" >> release_notes.md
              IMPROVEMENTS_FOUND=true
            fi
          done < commits.tmp
          
          if [ "$IMPROVEMENTS_FOUND" = false ]; then
            echo "_No improvements in this release._" >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          echo "### 📝 Documentation" >> release_notes.md
          echo "" >> release_notes.md
          
          DOCS_FOUND=false
          while IFS='|' read -r message hash author date; do
            if [[ $message == docs* ]] || [[ $message == *documentation* ]] || [[ $message == *readme* ]]; then
              echo "- $message (\`$hash\`) - $author" >> release_notes.md
              DOCS_FOUND=true
            fi
          done < commits.tmp
          
          if [ "$DOCS_FOUND" = false ]; then
            echo "_No documentation changes in this release._" >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          echo "### 🔀 Other Changes" >> release_notes.md
          echo "" >> release_notes.md
          
          OTHER_FOUND=false
          while IFS='|' read -r message hash author date; do
            if [[ $message != feat* ]] && [[ $message != fix* ]] && [[ $message != docs* ]] && \
               [[ $message != *feature* ]] && [[ $message != *bug* ]] && [[ $message != *fix* ]] && \
               [[ $message != *improve* ]] && [[ $message != *update* ]] && [[ $message != *enhance* ]] && \
               [[ $message != *documentation* ]] && [[ $message != *readme* ]] && [[ $message != refactor* ]] && \
               [[ $message != *add* ]]; then
              echo "- $message (\`$hash\`) - $author" >> release_notes.md
              OTHER_FOUND=true
            fi
          done < commits.tmp
          
          if [ "$OTHER_FOUND" = false ]; then
            echo "_No other changes in this release._" >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          echo "## 📋 Full Commit History" >> release_notes.md
          echo "" >> release_notes.md
          echo "<details>" >> release_notes.md
          echo "<summary>Click to expand full commit list</summary>" >> release_notes.md
          echo "" >> release_notes.md
          
          while IFS='|' read -r message hash author date; do
            echo "- **$message** - $author (\`$hash\`) - $date" >> release_notes.md
          done < commits.tmp
          
          echo "" >> release_notes.md
          echo "</details>" >> release_notes.md
          echo "" >> release_notes.md
          
          if [ "$IS_FIRST" != "true" ]; then
            echo "## 🔗 Links" >> release_notes.md
            echo "" >> release_notes.md
            echo "- **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG" >> release_notes.md
            echo "- **Diff View**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG.diff" >> release_notes.md
            echo "- **Patch View**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG.patch" >> release_notes.md
          fi
          
          # Clean up
          rm -f commits.tmp
          
          echo "Release notes generated successfully!"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag-info.outputs.current_tag }}
          name: "Release ${{ steps.tag-info.outputs.current_tag }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.tag-info.outputs.is_prerelease }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ steps.tag-info.outputs.current_tag }}
          path: release_notes.md
          retention-days: 90

      - name: Release Summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.tag-info.outputs.current_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits**: ${{ steps.commit-range.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ steps.tag-info.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **First release**: ${{ steps.commit-range.outputs.is_first_release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **[View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag-info.outputs.current_tag }})**" >> $GITHUB_STEP_SUMMARY
