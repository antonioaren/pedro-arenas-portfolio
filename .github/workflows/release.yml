name: Auto-release and deploy to Vercel

on:
  push:
    tags:
      - 'v*'  # Triggers on tags like v1.0.0, v2.1.3, etc.

jobs:
  auto-release-note:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to access all tags and commits

      - name: Get previous tag
        id: get-previous-tag
        run: |
          # Get the current tag (the one that triggered this workflow)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^$CURRENT_TAG$" | tail -n1)
          
          # If no previous tag exists, use the first commit
          if [ "$PREVIOUS_TAG" == "$CURRENT_TAG" ] || [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "is_first_release=true" >> $GITHUB_OUTPUT
          else
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "is_first_release=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"

      - name: Generate release notes
        id: generate-notes
        run: |
          CURRENT_TAG="${{ steps.get-previous-tag.outputs.current_tag }}"
          PREVIOUS_TAG="${{ steps.get-previous-tag.outputs.previous_tag }}"
          IS_FIRST_RELEASE="${{ steps.get-previous-tag.outputs.is_first_release }}"
          
          echo "# Release Notes for $CURRENT_TAG" > release_notes.md
          echo "" >> release_notes.md
          
          if [ "$IS_FIRST_RELEASE" == "true" ]; then
            echo "ðŸŽ‰ **First Release**" >> release_notes.md
            echo "" >> release_notes.md
            echo "## What's New" >> release_notes.md
            echo "" >> release_notes.md
            # Get all commits for first release
            git log --pretty=format:"- %s (%h)" --reverse >> release_notes.md
          else
            echo "## What's New" >> release_notes.md
            echo "" >> release_notes.md
            # Get commits between previous tag and current tag
            git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s (%h)" --reverse >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Commits in this release" >> release_notes.md
          echo "" >> release_notes.md
          
          if [ "$IS_FIRST_RELEASE" == "true" ]; then
            git log --pretty=format:"- **%s** - %an (%h)" --reverse >> release_notes.md
          else
            git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- **%s** - %an (%h)" --reverse >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-previous-tag.outputs.current_tag }}
          name: Release ${{ steps.get-previous-tag.outputs.current_tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload release notes as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ steps.get-previous-tag.outputs.current_tag }}
          path: release_notes.md

  deployment:
    needs: auto-release-note
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel environment (production)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build project (production)
        run: vercel build

      - name: Deploy to Vercel (production)
        id: vercel-prod-deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN")
          echo "deployment_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Print deployment URL
        run: echo "Production deployed to ${{ steps.vercel-prod-deploy.outputs.deployment_url }}"
